--========== SERVICES ==========
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local muscleEvent = LocalPlayer.muscleEvent
local changeSpeedSizeRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote

--========== RAYFIELD UI ==========
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "NOLIMIT",
	LoadingTitle = "By Nolimit",
	LoadingSubtitle = "MUSCLE LEGENDS SCRIPT ðŸ’ª",
	ConfigurationSaving = {
		Enabled = false,
	}
})

--========== TABS ==========
local MainTab = Window:CreateTab("Main", 4483362458)
local RebirthTab = Window:CreateTab("Rebirth", 4483362458)
local TeleportTab = Window:CreateTab("Teleport", 4483362458)

--========== UTILITIES ==========
local function gettool()
	for _, v in pairs(LocalPlayer.Backpack:GetChildren()) do
		if v.Name == "Punch" and LocalPlayer.Character:FindFirstChild("Humanoid") then
			LocalPlayer.Character.Humanoid:EquipTool(v)
		end
	end
	muscleEvent:FireServer("punch", "leftHand")
	muscleEvent:FireServer("punch", "rightHand")
end

local function fireTouchRock(rock)
	local char = LocalPlayer.Character
	if char and char:FindFirstChild("LeftHand") and char:FindFirstChild("RightHand") then
		firetouchinterest(rock, char.RightHand, 0)
		firetouchinterest(rock, char.RightHand, 1)
		firetouchinterest(rock, char.LeftHand, 0)
		firetouchinterest(rock, char.LeftHand, 1)
		gettool()
	end
end

--========== FAST PUNCH HANDLER ==========
local function startFastPunch()
	if _G.fastPunchRunning then return end
	_G.fastPunchRunning = true
	task.spawn(function()
		while _G.fastPunchRunning do
			local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
			if punch then
				punch.Parent = LocalPlayer.Character
				if punch:FindFirstChild("attackTime") then
					punch.attackTime.Value = 0
				end
			end
			local punchTool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Punch")
			if punchTool then punchTool:Activate() end
			task.wait()
		end
	end)
end

local function stopFastPunch()
	_G.fastPunchRunning = false
	local punch = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Punch")
	if punch then punch.Parent = LocalPlayer.Backpack end
end

--========== MAIN TAB ==========

-- TikTok Follow Button (Top)
MainTab:CreateButton({
    Name = "Follow Me on TikTok",
    Callback = function()
        local tiktokURL = "https://vm.tiktok.com/ZSHneVnL1mm8c-AO4BX/"
        if syn and syn.request then
            syn.request({Url = tiktokURL, Method = "GET"})
        else
            setclipboard(tiktokURL)
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "TikTok Link",
                Text = "Link copied to clipboard!",
                Duration = 5
            })
        end
    end,
    Description = "Click to follow me on TikTok!"
})

-- No Clip Toggle
MainTab:CreateToggle({
    Name = "No Clip",
    CurrentValue = false,
    Callback = function(state)
        _G.NoClipEnabled = state
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        if state then
            -- KeyDown listener to toggle collision off
            _G.NoClipConnection = game:GetService("RunService").Stepped:Connect(function()
                if humanoidRootPart then
                    humanoidRootPart.CanCollide = false
                end
            end)
        else
            if _G.NoClipConnection then
                _G.NoClipConnection:Disconnect()
            end
            if humanoidRootPart then
                humanoidRootPart.CanCollide = true
            end
        end
    end
})

-- Infinite Jump Toggle
MainTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(state)
        _G.InfiniteJumpEnabled = state

        if state then
            _G.JumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        else
            if _G.JumpConnection then
                _G.JumpConnection:Disconnect()
            end
        end
    end
})

-- WalkSpeed Slider
MainTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {100, 1000},
    Increment = 1,
    CurrentValue = 100,
    Callback = function(Value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    end,
})

--========== FARMING TAB ==========
local FarmingTab = Window:CreateTab("Farming", 4483362458)

-- Auto Punch
FarmingTab:CreateToggle({
    Name = "Auto Punch",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            startFastPunch()
        else
            stopFastPunch()
        end
    end,
})

-- Auto Weight
FarmingTab:CreateToggle({
    Name = "Auto Weight",
    CurrentValue = false,
    Callback = function(Value)
        _G.AutoWeight = Value
        task.spawn(function()
            while _G.AutoWeight do
                local tool = LocalPlayer.Backpack:FindFirstChild("Weight")
                if tool then
                    LocalPlayer.Character.Humanoid:EquipTool(tool)
                end
                muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
    end,
})

-- Auto Pushups
FarmingTab:CreateToggle({
    Name = "Auto Pushups",
    CurrentValue = false,
    Callback = function(Value)
        _G.AutoPushups = Value
        task.spawn(function()
            while _G.AutoPushups do
                local tool = LocalPlayer.Backpack:FindFirstChild("Pushups")
                if tool then
                    LocalPlayer.Character.Humanoid:EquipTool(tool)
                end
                muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
    end,
})

-- Auto Handstands
FarmingTab:CreateToggle({
    Name = "Auto Handstands",
    CurrentValue = false,
    Callback = function(Value)
        _G.AutoHandstands = Value
        task.spawn(function()
            while _G.AutoHandstands do
                local tool = LocalPlayer.Backpack:FindFirstChild("Handstands")
                if tool then
                    LocalPlayer.Character.Humanoid:EquipTool(tool)
                end
                muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
    end,
})

-- Auto Situps
FarmingTab:CreateToggle({
    Name = "Auto Situps",
    CurrentValue = false,
    Callback = function(Value)
        _G.AutoSitups = Value
        task.spawn(function()
            while _G.AutoSitups do
                local tool = LocalPlayer.Backpack:FindFirstChild("Situps")
                if tool then
                    LocalPlayer.Character.Humanoid:EquipTool(tool)
                end
                muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
    end,
})

--========== ROCK FARMS ==========
local function createRockToggle(tab, rockName, durability)
    tab:CreateToggle({
        Name = "Auto Farm: " .. rockName,
        CurrentValue = false,
        Callback = function(Value)
            _G["auto_" .. rockName:gsub(" ", "_")] = Value

            if Value then
                startFastPunch() -- enable fast punch with rocks

                -- rock farming loop
                task.spawn(function()
                    while _G["auto_" .. rockName:gsub(" ", "_")] do
                        if LocalPlayer.Durability.Value >= durability then
                            for _, v in pairs(Workspace.machinesFolder:GetDescendants()) do
                                if v.Name == "neededDurability" and v.Value == durability and v.Parent and v.Parent:FindFirstChild("Rock") then
                                    fireTouchRock(v.Parent.Rock)
                                end
                            end
                        end
                        task.wait()
                    end
                end)
            else
                -- stop fast punch only if no other rock farms are active
                local anyActive = false
                for k, obj in pairs(_G) do
                    if tostring(k):match("auto_") and obj == true then
                        anyActive = true
                        break
                    end
                end
                if not anyActive then
                    stopFastPunch()
                end
            end
        end,
    })
end

-- Add all rocks into Farming Tab
createRockToggle(FarmingTab, "Tiny Island Rock", 0)
createRockToggle(FarmingTab, "Starter Island Rock", 100)
createRockToggle(FarmingTab, "Legend Beach Rock", 5000)
createRockToggle(FarmingTab, "Frost Gym Rock", 150000)
createRockToggle(FarmingTab, "Mythical Gym Rock", 400000)
createRockToggle(FarmingTab, "Eternal Gym Rock", 750000)
createRockToggle(FarmingTab, "Legend Gym Rock", 1000000)
createRockToggle(FarmingTab, "Muscle King Gym Rock", 5000000)
createRockToggle(FarmingTab, "Ancient Jungle Rock", 10000000)

--========== PETS TAB ==========
local PetsTab = Window:CreateTab("Pets", 4483362458)

local selectedPet = "Neon Guardian"
PetsTab:CreateDropdown({
    Name = "Select Pet",
    Options = {
        "Neon Guardian",
        "Blue Birdie",
        "Blue Bunny",
        "Blue Firecaster",
        "Blue Pheonix",
        "Crimson Falcon",
        "Cybernetic Showdown Dragon",
        "Dark Golem",
        "Dark Legends Manticore",
        "Dark Vampy",
        "Darkstar Hunter",
        "Eternal Strike Leviathan",
        "Frostwave Legends Penguin",
        "Gold Warrior",
        "Golden Pheonix",
        "Golden Viking",
        "Green Butterfly",
        "Green Firecaster",
        "Infernal Dragon",
        "Lightning Strike Phantom",
        "Magic Butterfly",
        "Muscle Sensei",
        "Orange Hedgehog",
        "Orange Pegasus",
        "Phantom Genesis Dragon",
        "Purple Dragon",
        "Purple Falcon",
        "Red Dragon",
        "Red Firecaster",
        "Red Kitty",
        "Silver Dog",
        "Ultimate Supernova Pegasus",
        "Ultra Birdie",
        "White Pegasus",
        "White Pheonix",
        "Yellow Butterfly",
    },
    CurrentOption = {"Neon Guardian"},
    Callback = function(option)
        selectedPet = option[1]
    end,
})

PetsTab:CreateToggle({
    Name = "Auto Open Pet",
    CurrentValue = false,
    Callback = function(state)
        _G.AutoHatchPet = state
        if state then
            task.spawn(function()
                while _G.AutoHatchPet and selectedPet ~= "" do
                    local petToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedPet)
                    if petToOpen then
                        ReplicatedStorage.cPetShopRemote:InvokeServer(petToOpen)
                    end
                    task.wait(0.1)
                end
            end)
        end
    end,
})

--========== AURAS ==========
local selectedAura = "Blue Aura"
PetsTab:CreateDropdown({
    Name = "Select Aura",
    Options = {
        "Astral Electro",
        "Azure Tundra",
        "Blue Aura",
        "Dark Electro",
        "Dark Lightning",
        "Dark Storm",
        "Electro",
        "Enchanted Mirage",
        "Entropic Blast",
        "Eternal Megastrike",
        "Grand Supernova",
        "Green Aura",
        "Inferno",
        "Lightning",
        "Muscle King",
        "Power Lightning",
        "Purple Aura",
        "Purple Nova",
        "Red Aura",
        "Supernova",
        "Ultra Inferno",
        "Ultra Mirage",
        "Unstable Mirage",
        "Yellow Aura",
    },
    CurrentOption = {"Blue Aura"},
    Callback = function(option)
        selectedAura = option[1]
    end,
})

PetsTab:CreateToggle({
    Name = "Auto Open Aura",
    CurrentValue = false,
    Callback = function(state)
        _G.AutoHatchAura = state
        if state then
            task.spawn(function()
                while _G.AutoHatchAura and selectedAura ~= "" do
                    local auraToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedAura)
                    if auraToOpen then
                        ReplicatedStorage.cPetShopRemote:InvokeServer(auraToOpen)
                    end
                    task.wait(0.1)
                end
            end)
        end
    end,
})

--========== REBIRTH TAB ==========
RebirthTab:CreateLabel("â™» Rebirth Settings")

local targetRebirthValue = 0
local rebirthLoop = false

RebirthTab:CreateInput({
	Name = "Target Rebirth",
	PlaceholderText = "Enter target rebirths",
	RemoveTextAfterFocusLost = false,
	Callback = function(txt)
		local val = tonumber(txt)
		if val then
			targetRebirthValue = val
		end
	end,
})

RebirthTab:CreateToggle({
	Name = "Auto Rebirth on Target Rebirths",
	CurrentValue = false,
	Callback = function(state)
		rebirthLoop = state
		if state then
			task.spawn(function()
				while rebirthLoop do
					if LocalPlayer.leaderstats.Rebirths.Value >= targetRebirthValue then
						rebirthLoop = false
						game.StarterGui:SetCore("SendNotification", {
							Title = "âœ… Done!",
							Text = "Reached " .. tostring(targetRebirthValue) .. " rebirths",
							Duration = 5
						})
						break
					end
					ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
					task.wait(0.2)
				end
			end)
		end
	end,
})

-- Auto Teleport to Muscle King
RebirthTab:CreateToggle({
    Name = "Auto Teleport to Muscle King",
    CurrentValue = false,
    Callback = function(Value)
        _G.teleportActive = Value
        if Value then
            task.spawn(function()
                while _G.teleportActive do
                    local char = game.Players.LocalPlayer.Character
                    if char and char:FindFirstChild("HumanoidRootPart") then
                        char:MoveTo(Vector3.new(-8646, 17, -5738))
                    end
                    task.wait(1) -- delay to reduce lag
                end
            end)
        end
    end,
})

--========== TELEPORT TAB ==========
TeleportTab:CreateLabel(" Teleport Locations")

local function createTPButton(name, position, message)
	TeleportTab:CreateButton({
		Name = name,
		Callback = function()
			local player = game.Players.LocalPlayer
			local character = player.Character or player.CharacterAdded:Wait()
			local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
			humanoidRootPart.CFrame = position

			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Teleport",
				Text = "Teleported to " .. message,
				Duration = 3
			})
		end
	})
end

createTPButton("Spawn", CFrame.new(2, 8, 115), "Spawn")
createTPButton("Secret Area", CFrame.new(1947, 2, 6191), "Secret Area")
createTPButton("Tiny Island", CFrame.new(-34, 7, 1903), "Tiny Island")
createTPButton("Frozen", CFrame.new(-2600.00244, 3.67, -403.88, 0.08736, 0, 0.99617, 0, 1, 0, -0.99617, 0, 0.08736), "Frozen")
createTPButton("Mythical", CFrame.new(2255, 7, 1071), "Mythical")
createTPButton("Inferno", CFrame.new(-6768, 7, -1287), "Inferno")
createTPButton("Legend", CFrame.new(4604, 991, -3887), "Legend")
createTPButton("Muscle King Gym", CFrame.new(-8646, 17, -5738), "Muscle King Gym")
createTPButton("Jungle", CFrame.new(-8659, 6, 2384), "Jungle")
createTPButton("Brawl Lava", CFrame.new(4471, 119, -8836), "Brawl Lava")
createTPButton("Brawl Desert", CFrame.new(960, 17, -7398), "Brawl Desert")
createTPButton("Brawl Regular", CFrame.new(-1849, 20, -6335), "Brawl Regular")

--========== CREATE SETTINGS TAB ==========
if not Window then
    warn("GUI Window object not found!")
    return
end

local SettingsTab = Window:CreateTab("Settings")

--========== AUTO FORTUNE WHEEL ==========
SettingsTab:CreateToggle({
    Name = "Auto Fortune Wheel",
    CurrentValue = false,
    Callback = function(Value)
        _G.autoFortuneWheelActive = Value
        if Value then
            task.spawn(function()
                while _G.autoFortuneWheelActive do
                    local args = {
                        [1] = "openFortuneWheel",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("fortuneWheelChances"):WaitForChild("Fortune Wheel")
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openFortuneWheelRemote"):InvokeServer(unpack(args))
                    task.wait() -- prevent freezing
                end
            end)
        end
    end,
})

--========== GOD MODE (BRAWL) ==========
local godModeActive = false
local godParts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)

local function createGodParts()
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            local positions = {
                {"Part_Side_", Vector3.new(x * partSize, 0, z * partSize)},
                {"Part_LeftRight_", Vector3.new(-x * partSize, 0, z * partSize)},
                {"Part_UpLeft_", Vector3.new(-x * partSize, 0, -z * partSize)},
                {"Part_UpRight_", Vector3.new(x * partSize, 0, -z * partSize)},
            }
            for _, posData in ipairs(positions) do
                local newPart = Instance.new("Part")
                newPart.Size = Vector3.new(partSize, 1, partSize)
                newPart.Position = startPosition + posData[2]
                newPart.Anchored = true
                newPart.Transparency = 1
                newPart.CanCollide = true
                newPart.Name = posData[1] .. x .. "_" .. z
                newPart.Parent = workspace
                table.insert(godParts, newPart)
            end
        end
    end
end

local function removeGodParts()
    for _, part in ipairs(godParts) do
        if part and part.Parent then
            part:Destroy()
        end
    end
    godParts = {}
end

SettingsTab:CreateToggle({
    Name = "God Mode (Brawl)",
    CurrentValue = false,
    Callback = function(State)
        godModeActive = State
        if State then
            task.spawn(function()
                while godModeActive do
                    game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                    task.wait()
                end
            end)
            createGodParts()
        else
            removeGodParts()
        end
    end,
})

--========== ANTI KNOCKBACK ==========
SettingsTab:CreateToggle({
    Name = "Anti Knockback",
    CurrentValue = false,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local rootPart = char:WaitForChild("HumanoidRootPart")

        if Value then
            if not rootPart:FindFirstChild("AntiKnockback") then
                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.Name = "AntiKnockback"
                bodyVelocity.MaxForce = Vector3.new(1e5, 0, 1e5)
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                bodyVelocity.P = 1250
                bodyVelocity.Parent = rootPart
            end
        else
            local existingVelocity = rootPart:FindFirstChild("AntiKnockback")
            if existingVelocity then
                existingVelocity:Destroy()
   
